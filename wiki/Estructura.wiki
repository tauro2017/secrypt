=Estructura=

==`SeAES256.pas`==
 * `AESExpandKey`
   * Prepara la clave para ser utilizada
   * procedure AESExpandKey(var ExpandedKey: TAESExpandedKey; Key: TAESKey);
     * ExandedKey: Variable que recibe la clave ya procesada
     * Key: Clave de 32 bytes que se va a procesar
 * `AESEncrypt`
   * Cifra un bloque de 16 bytes
   * 
 * `AESDecrypt`
   * Descifra un bloque de 16 bytes
 * `AESXORState`
   * Realiza la operación XOR sobre dos bloques
 * `AESSwapKey`
   * Intercambia el orden de los bytes de la clave
 * `AESCopyKey`
   * Copia el contenido de una porción de memoria para se utilizada como clave

==`SeBase64.pas`==
 * `BinToStr`
   * Convierte un conjunto de datos binarios en una cadena de texto (base64)
 * `StrToBin`
   *Convierte una cadena de texto (base64) en un conjunto de datos binarios
 * `Base64CleanStr`
   * Limpia una cadena de texto de todos los caracteres no pertenecen a base64

==`SeSha256.pas`==
 * `CalcSHA256`
   * Calcula el hash SHA256 de un conjunto de datos binarios, o de una cadena de texto  
 * `SHA256ToStr`
   * Presenta el hash en formato hexadecimal para que pueda ser leído

==`SeStreams.pas`==
 * `TAESEnc`
   * Stream para cifrar datos usando AES256 con el metdodo CBC (Cipher-block chaining)
 * `TAESDec`
   * Stream para descifrar datos usando AES256 con el metdodo CBC (Cipher-block chaining)
 * `TBase64Enc`
   * Stream para codificar en base64 un conjunto de datos binarios
 * `TBase64Dec`
   * Stream para descodificar un conjunto de datos codificados en base64
 * `StrToStream`
   * Decodifica un conjunto de datos codificados en base64 y los guarda en un stream